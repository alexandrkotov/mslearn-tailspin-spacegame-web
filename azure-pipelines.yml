trigger:
  - "*"

pool:
  name: "Local"
  vmImage: "ubuntu-20.04"
  demands:
    - npm

variables:
  buildConfiguration: "Release"
  wwwrootDir: "Tailspin.SpaceGame.Web/wwwroot"
  dotnetSdkVersion: "8.x"

steps:
  - task: UseDotNet@2
    displayName: "Use .NET SDK $(dotnetSdkVersion)"
    inputs:
      version: "$(dotnetSdkVersion)"

  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"
      checkLatest: true

  - task: Npm@1
    displayName: "Run npm install"
    inputs:
      verbose: false

  - script: "./node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)"
    displayName: "Compile Sass assets"

  - script: npm install -g gulp-cli
    displayName: "Install Gulp CLI"

  - task: gulp@1
    displayName: "Run gulp tasks"

  - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
    displayName: "Write build info"
    workingDirectory: $(wwwrootDir)

  - task: DotNetCoreCLI@2
    displayName: "Restore project dependencies"
    inputs:
      command: "restore"
      projects: "**/*.csproj"

  - task: DotNetCoreCLI@2
    displayName: "Build the project - $(buildConfiguration)"
    inputs:
      command: "build"
      arguments: "--no-restore --configuration $(buildConfiguration)"
      projects: "**/*.csproj"

  - task: DotNetCoreCLI@2
    displayName: "Install .NET tools from local manifest"
    inputs:
      command: custom
      custom: tool
      arguments: "restore"

  - task: DotNetCoreCLI@2
    displayName: "Run unit tests - $(buildConfiguration)"
    inputs:
      command: "test"
      arguments: "--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/"
      publishTestResults: true
      projects: "**/*.Tests.csproj"

  - task: DotNetCoreCLI@2
    displayName: "Create code coverage report"
    inputs:
      command: custom
      custom: tool
      arguments: "run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines"

  # - task: PowerShell@2
  #   displayName: "Publish code coverage report"
  #   inputs:
  #     targetType: "inline"
  #     script: |
  #       $summaryFile = "$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml"
  #       $reportDirectory = "$(Build.SourcesDirectory)/CodeCoverage"
  #       Write-Host "##vso[task.setvariable variable=CodeCoverageSummaryFile]$summaryFile"
  #       Write-Host "##vso[task.setvariable variable=CodeCoverageReportDirectory]$reportDirectory"
  #       Write-Host "##vso[codecoverage.publish codecoveragetool=Cobertura;summaryfile=$summaryFile;reportdirectory=$reportDirectory;]"

  - script: type $(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura.xml
    displayName: 'Output Coverage File'

  - script: del $(Build.SourcesDirectory)\CodeCoverage\index.htm
    displayName: 'Remove index.htm'

  - task: PublishCodeCoverageResults@2
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)\CodeCoverage'
  
  # - task: PowerShell@2
  #   displayName: 'Publish code coverage report'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       $summaryFile = "$(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura.xml"
  #       $reportDirectory = "$(Build.SourcesDirectory)\CodeCoverage"
  #       Write-Host "##vso[task.setvariable variable=CodeCoverageSummaryFile]$summaryFile"
  #       Write-Host "##vso[task.setvariable variable=CodeCoverageReportDirectory]$reportDirectory"
  #       Write-Host "##vso[codecoverage.publish codecoveragetool=Cobertura;summaryfile=$summaryFile;reportdirectory=$reportDirectory;]"

  # - task: PowerShell@2
  #   displayName: 'Publish code coverage report'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       $summaryFile = "$(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura.xml"
  #       $reportDirectory = "$(Build.SourcesDirectory)\CodeCoverage"
  #       Write-Host "##vso[codecoverage.publish codecoveragetool=Cobertura;summaryfile=$summaryFile;reportdirectory=$reportDirectory;]"

  - script: dir $(Build.SourcesDirectory)\TestResults\Coverage\
    displayName: 'List Coverage Directory Contents'


  - script: dir $(Build.SourcesDirectory)\CodeCoverage\
    displayName: 'List CodeCoverage Directory Contents'  

  - task: DotNetCoreCLI@2
    displayName: "Publish the project - $(buildConfiguration)"
    inputs:
      command: "publish"
      projects: "**/*.csproj"
      publishWebProjects: false
      arguments: "--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)"
      zipAfterPublish: true

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: drop"
    condition: succeeded()
